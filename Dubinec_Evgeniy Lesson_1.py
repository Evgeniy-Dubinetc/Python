print("Задача 1")
# Реализовать вывод информации о промежутке времени в зависимости от его продолжительности duration в секундах:
# до минуты: <s> сек,  до часа: <m> мин <s> сек, до суток: <h> час <m> мин <s> сек,
# в остальных случаях: <d> дн <h> час <m> мин <s> сек.

# Присваиваем значения переменным
minute = 60
hour = 3600
day = 86400

# Запрашиваем у пользователя продолжительность
duration = int(input('Введите продолжительность в секундах: '))

# Вывод ответа на экран в секундах
if duration < minute:
    print('Промежуток времени составил: {} сек'.format(duration))

# Расчет и вывод ответа на экран в минутах и секундах
elif (minute <= duration) and (hour > duration):
    my_minute = duration // minute
    my_second = duration % minute
    print('Промежуток времени составил: {} мин {} сек'.format(my_minute, my_second))

# Расчет и вывод ответа на экран в часах, минутах и секундах
elif (duration >= hour) and duration < day:
    my_hour = duration // hour
    duration = duration % hour
    my_minute = duration // minute
    my_second = duration % minute
    print('Промежуток времени составил: {} час {} мин {} сек'.format(my_hour, my_minute, my_second))

# Расчет и вывод ответа на экран в днях, часах, минутах и секундах
elif duration >= day:
    my_day = duration // day
    duration = duration % day
    my_hour = duration // hour
    duration = duration % hour
    my_minute = duration // minute
    my_second = duration % minute
    print('Промежуток времени составил: {} дн {} час {} мин {} сек'.format(my_day, my_hour, my_minute, my_second))



print("Задача 2")
''' Создать список, состоящий из кубов нечётных чисел от 1 до 1000 (куб X - третья степень числа X):
1. Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.
Например, число «19 ^ 3 = 6859» будем включать в сумму, так как 6 + 8 + 5 + 9 = 28 – делится нацело на 7.
Внимание: использовать только арифметические операции!
2. К каждому элементу списка добавить 17 и заново вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.
* Решить задачу под пунктом b, не создавая новый список.
'''

# Создаю список из кубов нечётных чисел от 1 до 1000
cubes = [x**3 for x in range(1001) if x % 2 != 0]
print('Список кубов нечётных чисел {}'.format(cubes))

# Создаю копию списка срезом
my_cubes = cubes[:]

# Создаю пустые списки
sum_numbers = []
sum_numbers_17 = []

# итерация по списку
for i in my_cubes:
    if sum(map(int, str(i))) % 7 == 0:
        sum_numbers.append(i)
print('1. Сумма чисел, делящихся на 7:', sum(sum_numbers))

my_cubes = [i+17 for i in my_cubes]
for i in my_cubes:
    if sum(map(int, str(i))) % 7 == 0:
        sum_numbers_17.append(i)
print('2. Сумма чисел, делящихся на 7 (+17):', sum(sum_numbers_17))



print('Задача 3')
'''Реализовать склонение слова «процент» во фразе «N процентов». 
Вывести эту фразу на экран отдельной строкой для каждого из чисел в интервале от 1 до 100
1 процент
2 процента
3 процента
4 процента
5 процентов
6 процентов
...
100 процентов 
'''

# Указываю параметры последовательности
for i in range(0, 100, 1):
    my_str = str(i + 1)
    my_list = list(my_str)

    # Если последий знак цифры равен 1 и эта цифра не 11, выводим число "процент"
    if int(my_list[-1]) == 1 and i + 1 != 11:
        print('{} процент'.format(i + 1))

    # Если последий знак цифры больше 1 и меньше или равен 4, а также цифры > 10 и <=14, выводим число и "процентов"
    elif (int(my_list[-1]) > 1) and (int(my_list[-1]) <= 4):
        if (i + 1 > 10) and (i + 1 <= 14):
            print('{} процентов'.format(i + 1))

        # В остальных случаях выводим число и "процента"
        else:
            print('{} процента'.format(i + 1))

    # В остальных случаях верхнего блока, выводим число и "процентов"
    else:
        print('{} процентов'.format(i + 1))
