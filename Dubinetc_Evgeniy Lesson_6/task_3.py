print("Задача 3")
# Есть два файла: в одном хранятся ФИО пользователей сайта, а в другом — данные об их хобби.
# Известно, что при хранении данных используется принцип: одна строка — один пользователь,
# разделитель между значениями — запятая.
# Написать код, загружающий данные из обоих файлов и формирующий из них словарь: ключи — ФИО, значения — данные о хобби.
# Сохранить словарь в файл. Проверить сохранённые данные. Если в файле, хранящем данные о хобби, меньше записей,
# чем в файле с ФИО, задаём в словаре значение None. Если наоборот — выходим из скрипта с кодом «1».
# При решении задачи считать, что объём данных в файлах во много раз меньше объема ОЗУ.
# Фрагмент файла с данными о пользователях (users.csv):
# Иванов,Иван,Иванович
# Петров,Петр,Петрович
# Фрагмент файла с данными о хобби (hobby.csv):
# скалолазание,охота
# горные лыжи

# импортирую модуль json и из модуля itertools - zip_longest
import json
from itertools import zip_longest

# создаю словарь
my_dict = {}
# открываю файлы с пользователями и хобби
with open('users.csv', 'r', encoding='utf-8') as users:
    with open('hobby.csv', 'r', encoding='utf-8') as hobby:

        # создаю генератор, где каждой линии присваивается 1, и спомощью функции sum они складываются
        num_lines_users = sum(1 for line in users)
        num_lines_hobby = sum(1 for line in hobby)

        # проверяю, если количество линий пользователей меньше кол-ва линий хобби, выходим из скрипта с кодом «1»
        if num_lines_users < num_lines_hobby:
            exit(1)

        # возвращаю в начало файлов (после генератора каретка остается в конце файла)
        users.seek(0)
        hobby.seek(0)
        # проходим по файлам с помощью zip_longest, наполняя line_user - ФИО пользователей, и line_user_hobby - хобби
        # если в файле, хранящем данные о хобби, меньше записей, чем в файле с пользователями, zip_longest вернет None.
        for line_user, line_user_hobby in zip_longest(users, hobby):
            # записываю в словарь пользователей (strip уберет системные символы), = хобби, если хобби не имеет
            # значение None, записываю line_user_hobby
            my_dict[line_user.strip()] = line_user_hobby.strip() if line_user_hobby is not None else line_user_hobby
# открываю файл в кодировке utf-8
with open('task_3.json', 'w', encoding='utf-8') as f:
    # записываю в словарь
    json.dump(my_dict, f, ensure_ascii=False)

print(my_dict)
